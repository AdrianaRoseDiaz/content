"""Base Script for Cortex XSOAR (aka Demisto)

This is an empty script with some basic structure according
to the code conventions.

MAKE SURE YOU REVIEW/REPLACE ALL THE COMMENTS MARKED AS "TODO"

Developer Documentation: https://xsoar.pan.dev/docs/welcome
Code Conventions: https://xsoar.pan.dev/docs/integrations/code-conventions
Linting: https://xsoar.pan.dev/docs/integrations/linting

"""
from enum import Enum

import demistomock as demisto
from CommonServerPython import *
from CommonServerUserPython import *


class Action(Enum):
    ALLOW = 'allow'
    BLOCK = 'block'
    ISOLATE = 'isolate'
    UNISOLATE = 'unisolate'



INCIDENT_ID = demisto.incident().get('id')


XDR_HASH_ACTIONS = {
    Action.ALLOW: 'xdr-blacklist-files',
    Action.BLOCK: 'xdr-whitelist-files'
}

XDR_ISOLATION_ACTIONS = {
    Action.ISOLATE: 'xdr-isolate-endpoint',
    Action.UNISOLATE: 'xdr-unisolate-endpoint'
}

MSDE_HASH_ACTIONS = {
    Action.ALLOW: 'Allow',
    Action.BLOCK: 'AlertAndBlock',
}

MSDE_ISOLATION = {
    Action.ISOLATE: ('microsoft-atp-isolate-machine', {'isolation_type': 'Full', 'comment': ''}),
    Action.UNISOLATE: ('microsoft-atp-unisolate-machine', {})
}

CROWDSTRIKE_HASH_ACTIONS = {
    Action.ALLOW: {'action': 'allow',
                   'description': f'Whitelisted based on XSOAR inc {INCIDENT_ID}',
                   'severity': 'low'},
    Action.BLOCK: {'action': 'prevent',
                   'description': f'Blacklisted based on XSOAR inc {INCIDENT_ID}',
                   'severity': 'high'}
}

CROWDSTIKE_ISOLATION_ACTIONS = {
    Action.ISOLATE: 'cs-falcon-contain-host',
    Action.UNISOLATE: 'cs-falcon-lift-host-containment'
}
''' STANDALONE FUNCTION '''


def xdr_hashes(action: Action, hashes: List[str]):
    xdr_results, xdr_errors = [], []
    command = XDR_HASH_ACTIONS.get(action)
    res, content = execute_command(command,
                                   {'hash_list': ','.join(hashes)},
                                   fail_on_error=False,
                                   extract_contents=False)
    if res:
        xdr_results.extend(content)
    else:
        xdr_errors.append(content)
    return xdr_results, xdr_errors


def xdr_isolation(action: Action, device_ids: List[str]):
    xdr_results, xdr_errors = [], []
    command = XDR_ISOLATION_ACTIONS.get(action)
    res, content = execute_command(command,
                                   {'endpoint_id': ','.join(device_ids)},
                                   fail_on_error=False,
                                   extract_contents=False)
    if res:
        xdr_results.extend(content)
    else:
        xdr_errors.append(content)


def msde_hashes(action: Action, hashes: List[str]):
    action = MSDE_HASH_ACTIONS.get(action)
    msde_results, msde_errors = [], []
    for h in hashes:
        res, content = execute_command('microsoft-atp-sc-indicator-create',
                                       {'indicator_value': h,
                                        'indicator_type': 'FileSha256',
                                        'action': action,
                                        'indicator_description': f'XSOAR - related incident {INCIDENT_ID}',
                                        'indicator_title': f'XSOAR - related incident {INCIDENT_ID}'},
                                       fail_on_error=False,
                                       extract_contents=False)
        if res:
            msde_results.extend(content)
        else:
            msde_errors.append(content)

    return msde_results, msde_errors


def msde_isolation(action: Action, device_ids: List[str]):
    msde_results, msde_errors = [], []
    command, args = MSDE_ISOLATION.get(action)
    args |= {'machine_id': ','.join(device_ids),
             'comment': f'XSOAR - related incident {INCIDENT_ID}'}
    res, content = execute_command(command, args, fail_on_error=False, extract_contents=False)
    if res:
        msde_results.extend(content)
    else:
        msde_errors.append(content)
    return msde_results, msde_errors


def crowdstrike_falcon_hashes(action: Action, hashes: List[str]):
    falcon_results, falcon_errors = [], []
    ioc_metadata = MSDE_HASH_ACTIONS.get(action)
    res, search_results = execute_command('cs-falcon-search-custom-iocs',
                                          {'values': ','.join(hashes)},
                                          fail_on_error=False)
    if res:
        search_results_hashes = [ioc.get('value') for ioc in search_results.get('resources', [])]
        new_hashes = [h for h in hashes if h not in search_results_hashes]
        for h in new_hashes:
            res, content = execute_command('cs-falcon-upload-custom-ioc',
                                           {'ioc_type': 'sha256',
                                            'platforms': 'linux,mac,windows',
                                            'applied_globally': 'true',
                                            'value': h,
                                            **ioc_metadata}, fail_on_error=False, extract_contents=False)
            if res:
                falcon_results.extend(content)
            else:
                falcon_errors.append(content)

        for ioc in search_results.get('resources', []):
            res, content = execute_command('cs-falcon-update-custom-ioc',
                                           {'ioc_id': ioc.get('id'),
                                            'platforms': 'linux,mac,windows',
                                            **ioc_metadata}, fail_on_error=False, extract_contents=False)
            if res:
                falcon_results.extend(content)
            else:
                falcon_errors.append(content)
    return falcon_results


def crowdstrike_isolation(action: Action, device_ids: List[str]):
    crowdstrike_results, crowdstrike_errors = [], []
    command = CROWDSTIKE_ISOLATION_ACTIONS.get(action)
    res, content = execute_command(command, {'ids': ','.join(device_ids)}, fail_on_error=False, extract_contents=False)
    if res:
        crowdstrike_results.extend(content)
    else:
        crowdstrike_errors.append(content)
    return crowdstrike_results, crowdstrike_errors

