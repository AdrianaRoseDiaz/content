"""Base Script for Cortex XSOAR (aka Demisto)

This is an empty script with some basic structure according
to the code conventions.

MAKE SURE YOU REVIEW/REPLACE ALL THE COMMENTS MARKED AS "TODO"

Developer Documentation: https://xsoar.pan.dev/docs/welcome
Code Conventions: https://xsoar.pan.dev/docs/integrations/code-conventions
Linting: https://xsoar.pan.dev/docs/integrations/linting

"""

import demistomock as demisto
from CommonServerPython import *
from CommonServerUserPython import *

from typing import Dict, Any
import traceback

''' STANDALONE FUNCTION '''


def allow_xdr(hashes: List[str]):
    res, content = execute_command('xdr-whitelist-files',
                                   {'hash_list': ','.join(hashes)},
                                   fail_on_error=False,
                                   extract_contents=False)
    if res:
        return content
    else:
        demisto.info(content)
        return []

def allow_msde(hashes: List[str]):
    incident_id = demisto.incident().get('id')
    msde_results = []
    for h in hashes:
        res, content = execute_command('microsoft-atp-sc-indicator-create',
                                       {'indicator_value': h,
                                        'indicator_type': 'FileSha256',
                                        'action': 'Allow',
                                        'indicator_description': f'XSOAR - related incident {incident_id}',
                                        'indicator_title': f'XSOAR - related incident {incident_id}'},
                                       fail_on_error=False,
                                       extract_contents=False)
        print(content)
        if res:
            msde_results.extend(content)
        else:
            demisto.info(content)

    return msde_results


def allow_crowdstrike_falcon(hashes: List[str]):
    incident_id = demisto.incident().get('id')
    falcon_results = []
    res, search_results = execute_command('cs-falcon-search-custom-iocs',
                                          {'values': ','.join(hashes)},
                                          fail_on_error=False)
    if res:
        search_results_hashes = [ioc.get('value') for ioc in search_results.get('resources', [])]
        new_hashes = [h for h in hashes if h not in search_results_hashes]

        ioc_metadata = {'action': 'allow',
                        'description': f'Whitelisted based on XSOAR inc {incident_id}',
                        'severity': 'low'}

        for h in new_hashes:
            res, content = execute_command('cs-falcon-upload-custom-ioc',
                                           {'ioc_type': 'sha256',
                                            'platforms': 'linux,mac,windows',
                                            'applied_globally': 'true',
                                            'value': h,
                                            **ioc_metadata}, fail_on_error=False, extract_contents=False)
            if res:
                falcon_results.extend(content)
            else:
                demisto.info(content)

        for ioc in search_results.get('resources', []):
            res, content = execute_command('cs-falcon-update-custom-ioc',
                                           {'ioc_id': ioc.get('id'),
                                            'platforms': 'linux,mac,windows',
                                            **ioc_metadata}, fail_on_error=False, extract_contents=False)
            if res:
                falcon_results.extend(content)
            else:
                demisto.info(content)
    return falcon_results


def run_allow_hash(hashes: List[str]) -> list:
    """Returns a simple python dict with the information provided
    in the input (dummy).

    :type hashes: ``List[str]``
    :param hashes: string to add in the dummy dict that is returned

    :return: dict as {"dummy": dummy}
    :rtype: ``str``
    """

    # check instances
    results = []
    instances = execute_command('GetInstances', {'brand': ','.join(INSTANCE_TO_FUNC.keys())})
    instances = {instance.get('brand') for instance in instances}
    for instance in instances:
        # for each brand that configured, run the appropriate function
        results.extend(INSTANCE_TO_FUNC.get(instance)(hashes))
    return results


# TODO: ADD additional command functions that translate XSOAR inputs/outputs


''' MAIN FUNCTION '''


def main():
    hashes = argToList(demisto.args().get('hash', None))
    if not hashes:
        raise ValueError('hash not specified')

    try:
        return_results(run_allow_hash(hashes))
    except Exception as ex:
        demisto.error(traceback.format_exc())  # print the traceback
        return_error(f'Failed to execute BlockHashWrapper. Error: {str(ex)}')


INSTANCE_TO_FUNC = {'Cortex XDR - IR': allow_xdr,
                    'Microsoft Defender Advanced Threat Protection': allow_msde,
                    'CrowdstrikeFalcon': allow_crowdstrike_falcon}

''' ENTRY POINT '''

if __name__ in ('__main__', '__builtin__', 'builtins'):
    main()
