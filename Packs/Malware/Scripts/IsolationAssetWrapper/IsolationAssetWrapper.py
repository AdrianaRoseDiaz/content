"""Base Script for Cortex XSOAR (aka Demisto)

This is an empty script with some basic structure according
to the code conventions.

MAKE SURE YOU REVIEW/REPLACE ALL THE COMMENTS MARKED AS "TODO"

Developer Documentation: https://xsoar.pan.dev/docs/welcome
Code Conventions: https://xsoar.pan.dev/docs/integrations/code-conventions
Linting: https://xsoar.pan.dev/docs/integrations/linting

"""

import demistomock as demisto
from CommonServerPython import *
from CommonServerUserPython import *

import traceback

''' STANDALONE FUNCTION '''

INCIDENT_ID = demisto.incident().get('id')

XDR_ACTIONS = {
    'isolate': 'xdr-isolate-endpoint',
    'unisolate': 'xdr-unisolate-endpoint'
}


MSDE_ACTIONS = {
    'isolate': ('microsoft-atp-isolate-machine', {'isolation_type': 'Full'}),
    'unisolate': ('microsoft-atp-unisolate-machine', {})
}

CROWDSTIKE_ACTIONS = {
    'isolate': 'cs-falcon-contain-host',
    'unisolate': 'cs-falcon-lift-host-containment'
}


CROWDSTRIKE_HASH_ACTIONS = {
    'allow': {'action': 'allow',
              'description': f'Whitelisted based on XSOAR inc {INCIDENT_ID}',
              'severity': 'low'},
    'block': {'action': 'prevent',
              'description': f'Blacklisted based on XSOAR inc {INCIDENT_ID}',
              'severity': 'high'}
}


def execute_command(command, args, extract_contents=True):
    execute_command_results = demisto.executeCommand(command, args)
    errors, results = [], []
    for res in execute_command_results:
        if is_error(res):
            error_message = get_error(res)
            errors.append(error_message)
        else:
            if not extract_contents:
                results.append(res)
            else:
                content = res.get('Contents', {})
                if content:
                    results.append(content)
    return results, errors


def run_xdr_action(device_ids: List[str], action: str):
    command = XDR_ACTIONS.get(action)
    xdr_results, xdr_errors = execute_command(command,
                                       {'endpoint_id': ','.join(device_ids)},
                                       extract_contents=False)
    return xdr_results, xdr_errors


def run_msde_action(device_ids: List[str], action: str):
    command, args = MSDE_ACTIONS.get(action)
    args |= {'machine_id': ','.join(device_ids),
             'comment': f'XSOAR - related incident {INCIDENT_ID}'}
    msde_results, msde_errors = execute_command(command, args, extract_contents=False)
    return msde_results, msde_errors


def run_crowdstrike_falcon_action(device_ids: List[str], action):
    command = CROWDSTIKE_ACTIONS.get(action)
    falcon_results, falcon_errors = execute_command(command, {'ids': ','.join(device_ids)}, extract_contents=False)
    return falcon_results, falcon_errors


def run_isolation_action(device_ids: List[str], action: str) -> list:
    """Returns a simple python dict with the information provided
    in the input (dummy).

    :type hashes: ``List[str]``
    :param hashes: string to add in the dummy dict that is returned

    :return: dict as {"dummy": dummy}
    :rtype: ``str``
    """

    # check instances
    full_results, full_errors = [], []
    instances, instance_errors = execute_command('GetInstances', {'brand': ','.join(INSTANCE_TO_FUNC.keys())})
    if instance_errors:
        raise DemistoException(f'Cant get instances because of {str(instance_errors)}')
    instances = {instance.get('brand') for instance in instances[0]}
    for instance in instances:
        # for each brand that configured, run the appropriate function
        results, errors = INSTANCE_TO_FUNC.get(instance)(device_ids, action)
        full_results.extend(results)
        full_errors.extend(errors)
    # deal with errors
    if full_errors:
        error_msg = '\n'.join(['The following errors were seen'] + full_errors)
        if full_results:
            full_results.append(error_msg)
        else:
            raise DemistoException(error_msg)

    return full_results


''' MAIN FUNCTION '''


def main():
    device_ids = argToList(demisto.args().get('device_ids', None))
    action = demisto.args().get('action')
    if not device_ids:
        raise ValueError('hash not specified')
    if not action or action not in {'allow', 'block'}:
        raise ValueError('Action not specified or not in allowed actions')
    try:
        return_results(run_isolation_action(device_ids, action))
    except Exception as ex:
        demisto.error(traceback.format_exc())  # print the traceback
        return_error(f'Failed to execute BlockHashWrapper. Error: {str(ex)}')


INSTANCE_TO_FUNC = {'Cortex XDR - IR': run_xdr_action,
                    'Microsoft Defender Advanced Threat Protection': run_msde_action,
                    'CrowdstrikeFalcon': run_crowdstrike_falcon_action}

''' ENTRY POINT '''

if __name__ in ('__main__', '__builtin__', 'builtins'):
    main()
