"""Base Script for Cortex XSOAR (aka Demisto)

This is an empty script with some basic structure according
to the code conventions.

MAKE SURE YOU REVIEW/REPLACE ALL THE COMMENTS MARKED AS "TODO"

Developer Documentation: https://xsoar.pan.dev/docs/welcome
Code Conventions: https://xsoar.pan.dev/docs/integrations/code-conventions
Linting: https://xsoar.pan.dev/docs/integrations/linting

"""

import demistomock as demisto
from CommonServerPython import *

import traceback

''' STANDALONE FUNCTION '''

BRANDS = ['Cortex XDR - IR',
          'Microsoft Defender Advanced Threat Protection',
          'CrowdstrikeFalcon']

INCIDENT_ID = demisto.incident().get('id')

XDR_ACTIONS = {
    'isolate': 'xdr-isolate-endpoint',
    'unisolate': 'xdr-unisolate-endpoint'
}

MSDE_ACTIONS = {
    'isolate': ('microsoft-atp-isolate-machine', {'isolation_type': 'Full'}),
    'unisolate': ('microsoft-atp-unisolate-machine', {})
}

CROWDSTIKE_ACTIONS = {
    'isolate': 'cs-falcon-contain-host',
    'unisolate': 'cs-falcon-lift-host-containment'
}

CROWDSTRIKE_HASH_ACTIONS = {
    'allow': {'action': 'allow',
              'description': f'Whitelisted based on XSOAR inc {INCIDENT_ID}',
              'severity': 'low'},
    'block': {'action': 'prevent',
              'description': f'Blacklisted based on XSOAR inc {INCIDENT_ID}',
              'severity': 'high'}
}


def create_commands_wrapper(device_ids: List[str], action: str):
    msde_command, msde_args = MSDE_ACTIONS.get(action)
    msde_args |= {'machine_id': ','.join(device_ids),
                  'comment': f'XSOAR - related incident {INCIDENT_ID}'}
    return [CommandWrapper(brand='Cortex XDR - IR',
                           command=XDR_ACTIONS.get(action),
                           args={'endpoint_id': ','.join(device_ids)}),
            CommandWrapper(brand='Microsoft Defender Advanced Threat Protection',
                           command=msde_command,
                           args=msde_args),
            CommandWrapper(brand='CrowdstrikeFalcon',
                           command=CROWDSTIKE_ACTIONS.get(action),
                           args={'ids': ','.join(device_ids)})]


def run_isolation_action(device_ids: List[str], action: str) -> list:
    """Returns a simple python dict with the information provided
    in the input (dummy).

    :type hashes: ``List[str]``
    :param hashes: string to add in the dummy dict that is returned

    :return: dict as {"dummy": dummy}
    :rtype: ``str``
    """

    command_wrappers = create_commands_wrapper(device_ids, action)
    return create_generic_wrapper(BRANDS, command_wrappers, device_ids, action)


''' MAIN FUNCTION '''


def main():
    device_ids = argToList(demisto.args().get('device_ids', None))
    action = demisto.args().get('action')
    if not device_ids:
        raise ValueError('hash not specified')
    if not action or action not in {'isolate', 'unisolate'}:
        raise ValueError('Action not specified or not in allowed actions')
    try:
        return_results(run_isolation_action(device_ids, action))
    except Exception as ex:
        demisto.error(traceback.format_exc())  # print the traceback
        return_error(f'Failed to execute BlockHashWrapper. Error: {str(ex)}')


''' ENTRY POINT '''

if __name__ in ('__main__', '__builtin__', 'builtins'):
    main()
