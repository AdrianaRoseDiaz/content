"""Base Script for Cortex XSOAR - Unit Tests file

Pytest Unit Tests: all funcion names must start with "test_"

More details: https://xsoar.pan.dev/docs/integrations/unit-testing

MAKE SURE YOU REVIEW/REPLACE ALL THE COMMENTS MARKED AS "TODO"

"""

import pytest


@pytest.mark.parametrize('action', ['isolate', 'unisolate'])
def test_create_command_wrappers(mocker, action):
    from IsolationAssetWrapper import demisto, create_commands_wrapper, MSDE_ACTIONS, XDR_ACTIONS, \
        CROWDSTRIKE_ACTIONS
    device_ids = ['device1',
                  'device2',
                  'device3']
    mocker.patch.object(demisto, 'incident', return_value={'id': 1})
    msde_command, msde_args = MSDE_ACTIONS.get(action)
    command_wrappers = create_commands_wrapper(device_ids, action)
    assert len(command_wrappers) == 3
    assert {command_wrapper.brand for command_wrapper in command_wrappers} == \
           {'Cortex XDR - IR', 'CrowdstrikeFalcon', 'Microsoft Defender Advanced Threat Protection'}
    for command_wrapper in command_wrappers:
        if command_wrapper.brand == 'Microsoft Defender Advanced Threat Protection':
            assert isinstance(command_wrapper.commands, str)
            assert isinstance(command_wrapper.args_lst, dict)
            assert command_wrapper.commands == msde_command
            assert command_wrapper.args_lst == msde_args
        if command_wrapper.brand == 'Cortex XDR - IR':
            assert isinstance(command_wrapper.commands, list)
            assert isinstance(command_wrapper.args_lst, list)
            assert len(command_wrapper.commands) == len(device_ids)
            assert len(command_wrapper.args_lst) == len(device_ids)
            assert set(command_wrapper.commands) == {XDR_ACTIONS.get(action)}
            assert command_wrapper.args_lst == [{'endpoint_id': device_id} for device_id in device_ids]
        if command_wrapper.brand == 'CrowdstrikeFalcon':
            assert isinstance(command_wrapper.commands, str) and isinstance(command_wrapper.args_lst, dict)
            assert command_wrapper.commands == CROWDSTRIKE_ACTIONS.get(action)
            assert command_wrapper.args_lst == {'ids': ','.join(device_ids)}
