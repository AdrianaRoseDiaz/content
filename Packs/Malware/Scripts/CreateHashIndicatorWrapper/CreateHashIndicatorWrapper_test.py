"""Base Script for Cortex XSOAR - Unit Tests file

Pytest Unit Tests: all funcion names must start with "test_"

More details: https://xsoar.pan.dev/docs/integrations/unit-testing

MAKE SURE YOU REVIEW/REPLACE ALL THE COMMENTS MARKED AS "TODO"

"""
import pytest

import CommonServerPython
import CreateHashIndicatorWrapper

test_data = [CommonServerPython.ResultWrapper(command='cs-falcon-search-custom-iocs', args={
    'values': '5fdbcbea1751a7969f219297b61ed6080d0840962cd60cf99593d89448622714,b1b49a7ca3d40f82b6d264586509c587148e4587f46c2d1a02dc1680d8998098'},
                                              brand='CrowdstrikeFalcon', instance='CrowdstrikeFalcon_instance_1',
                                              result={'errors': None,
                                                      'meta': {
                                                          'pagination': {
                                                              'after': 'WzE2NDYzMTE5ODY4OTIsImUzYmZkMWVhYzY0MTdmY2NlNTg5OGExMWE3NWZkODZmMWQ0ZDdiZWE5NDQwNzExOGQ1ZWNjYmI5YWU3YTQ4ZGMiXQ==',
                                                              'limit': 50,
                                                              'offset': 1,
                                                              'total': 1},
                                                          'powered_by': 'ioc-manager',
                                                          'query_time': 0.007056853,
                                                          'trace_id': 'aca5b03c-9d08-45b9-9ef4-1c795b85caac'},
                                                      'resources': [{
                                                          'action': 'prevent',
                                                          'applied_globally': True,
                                                          'created_by': '2bf188d347e44e08946f2e61ef590c24',
                                                          'created_on': '2022-03-03T09:34:14.4678446Z',
                                                          'deleted': False,
                                                          'description': 'Blacklisted based on XSOAR inc ab57e22c-ad03-4aba-8b6c-b42bd895a116',
                                                          'expired': False,
                                                          'from_parent': False,
                                                          'id': 'e3bfd1eac6417fcce5898a11a75fd86f1d4d7bea94407118d5eccbb9ae7a48dc',
                                                          'metadata': {
                                                              'av_hits': -1,
                                                              'signed': False},
                                                          'mobile_action': 'no_action',
                                                          'modified_by': '2bf188d347e44e08946f2e61ef590c24',
                                                          'modified_on': '2022-03-03T12:53:06.892088234Z',
                                                          'platforms': [
                                                              'linux',
                                                              'mac',
                                                              'windows'],
                                                          'severity': 'high',
                                                          'type': 'sha256',
                                                          'value': '5fdbcbea1751a7969f219297b61ed6080d0840962cd60cf99593d89448622714'}]})]


@pytest.mark.parametrize('action', ['allow', 'block'])
def test_get_crowdstrike_commands_args(mocker, action):
    from CreateHashIndicatorWrapper import get_crowdstrike_commands_args, demisto, CROWDSTRIKE_ACTIONS
    ioc_metadata = CROWDSTRIKE_ACTIONS.get(action)
    hashes_dct = {'b1b49a7ca3d40f82b6d264586509c587148e4587f46c2d1a02dc1680d8998098':
                      ('cs-falcon-upload-custom-ioc',
                       {'ioc_type': 'sha256', 'platforms': 'linux,mac,windows', 'applied_globally': 'true',
                        'value': 'b1b49a7ca3d40f82b6d264586509c587148e4587f46c2d1a02dc1680d8998098',
                        **ioc_metadata}),
                  '5fdbcbea1751a7969f219297b61ed6080d0840962cd60cf99593d89448622714': ('cs-falcon-update-custom-ioc', {
                      'ioc_id': 'e3bfd1eac6417fcce5898a11a75fd86f1d4d7bea94407118d5eccbb9ae7a48dc',
                      **ioc_metadata})}
    ioc_to_hash = {
        'e3bfd1eac6417fcce5898a11a75fd86f1d4d7bea94407118d5eccbb9ae7a48dc':
            '5fdbcbea1751a7969f219297b61ed6080d0840962cd60cf99593d89448622714'}
    mocker.patch.object(CreateHashIndicatorWrapper, 'execute_commands_multiple_results', return_value=(test_data, []))
    mocker.patch.object(demisto, 'incident', return_value={'id': 1})
    commands, args_lst = get_crowdstrike_commands_args(list(hashes_dct.keys()), action)
    for command, args in zip(commands, args_lst):
        h = args.get('value') or ioc_to_hash.get(args.get('ioc_id'))
        assert h in hashes_dct
        expected_command, expected_args = hashes_dct.get(h)
        assert command == expected_command
        assert args == expected_args


@pytest.mark.parametrize('action', ['allow', 'block'])
def test_create_command_wrappers(mocker, action):
    from CreateHashIndicatorWrapper import demisto, create_commands_wrapper, MSDE_ACTIONS, XDR_ACTIONS, \
        CROWDSTRIKE_ACTIONS
    hashes = ['b1b49a7ca3d40f82b6d264586509c587148e4587f46c2d1a02dc1680d8998098',
              '5fdbcbea1751a7969f219297b61ed6080d0840962cd60cf99593d89448622714']
    mocker.patch.object(CreateHashIndicatorWrapper, 'execute_commands_multiple_results', return_value=(test_data, []))
    mocker.patch.object(demisto, 'incident', return_value={'id': 1})
    command_wrappers = create_commands_wrapper(hashes, action)
    ioc_metadata = CROWDSTRIKE_ACTIONS.get(action)
    assert len(command_wrappers) == 3
    assert {command_wrapper.brand for command_wrapper in command_wrappers} == \
           {'Cortex XDR - IR', 'CrowdstrikeFalcon', 'Microsoft Defender Advanced Threat Protection'}
    for command_wrapper in command_wrappers:
        if command_wrapper.brand == 'Microsoft Defender Advanced Threat Protection':
            assert isinstance(command_wrapper.commands, list) and isinstance(command_wrapper.args_lst, list)
            assert len(command_wrapper.commands) == len(hashes) and len(command_wrapper.args_lst) == len(hashes)
            assert set(command_wrapper.commands) == {'microsoft-atp-sc-indicator-create'}
            assert {args.get('action') for args in command_wrapper.args_lst} == {MSDE_ACTIONS.get(action)}
        if command_wrapper.brand == 'Cortex XDR - IR':
            assert isinstance(command_wrapper.commands, str) and isinstance(command_wrapper.args_lst, dict)
            assert command_wrapper.commands == XDR_ACTIONS.get(action)
        if command_wrapper.brand == 'CrowdstrikeFalcon':
            assert isinstance(command_wrapper.commands, list) and isinstance(command_wrapper.args_lst, list)
            assert len(command_wrapper.commands) == len(hashes) and len(command_wrapper.args_lst) == len(hashes)
            assert set(command_wrapper.commands) == {'cs-falcon-upload-custom-ioc',
                                                     'cs-falcon-update-custom-ioc'}
            assert command_wrapper.args_lst == [
                {'ioc_type': 'sha256', 'platforms': 'linux,mac,windows', 'applied_globally': 'true',
                 'value': 'b1b49a7ca3d40f82b6d264586509c587148e4587f46c2d1a02dc1680d8998098',
                 **ioc_metadata},
                {'ioc_id': 'e3bfd1eac6417fcce5898a11a75fd86f1d4d7bea94407118d5eccbb9ae7a48dc',
                 **ioc_metadata}
            ]
