"""Base Script for Cortex XSOAR - Unit Tests file

Pytest Unit Tests: all funcion names must start with "test_"

More details: https://xsoar.pan.dev/docs/integrations/unit-testing
"""
import pytest

import CommonServerPython
import CreateHashIndicatorWrapper

test_data = [CommonServerPython.ResultWrapper(command='cs-falcon-search-custom-iocs', args={
    'values': 'hash1,hash2'},
    brand='CrowdstrikeFalcon', instance='CrowdstrikeFalcon_instance_1',
    result={'errors': None,
            'resources': [{
                'action': 'prevent',
                'applied_globally': True,
                'description': 'Blacklisted based on XSOAR inc 1',
                'id': '12',
                'platforms': [
                    'linux',
                    'mac',
                    'windows'],
                'severity': 'high',
                'type': 'sha256',
                'value': 'hash2'}]})]


@pytest.mark.parametrize('action', ['allow', 'block'])
def test_get_crowdstrike_commands_args(mocker, action):
    """
    Given:
        the action to perform (allow or block)
    When:
        Getting the CrowdStrike commands and args list to run the action on Crowdstrike
    Then:
        Ensure the right commands and args_list are being returned.

    """
    from CreateHashIndicatorWrapper import get_crowdstrike_commands_args, demisto, CROWDSTRIKE_ACTIONS
    ioc_metadata = CROWDSTRIKE_ACTIONS.get(action)
    hashes_dct = {'hash1':
                  ('cs-falcon-upload-custom-ioc',
                   {'ioc_type': 'sha256', 'platforms': 'linux,mac,windows', 'applied_globally': 'true',
                    'value': 'hash1',
                    **ioc_metadata}),
                  'hash2': ('cs-falcon-update-custom-ioc', {
                      'ioc_id': '12',
                      **ioc_metadata})}
    ioc_to_hash = {
        '12':
            'hash2'}
    mocker.patch.object(CreateHashIndicatorWrapper, 'execute_commands_multiple_results', return_value=(test_data, []))
    mocker.patch.object(demisto, 'incident', return_value={'id': 1})
    commands, args_lst = get_crowdstrike_commands_args(list(hashes_dct.keys()), action)
    for command, args in zip(commands, args_lst):
        h = args.get('value') or ioc_to_hash.get(args.get('ioc_id'))
        assert h in hashes_dct
        expected_command, expected_args = hashes_dct.get(h)
        assert command == expected_command
        assert args == expected_args


@pytest.mark.parametrize('action', ['allow', 'block'])
def test_create_command_wrappers(mocker, action):
    """
    Given:
        the action to perform (allow or block)
    When:
        Calling `create_command_wrappers` to get all the command wrappers for the script.
    Then:
        Ensure the right commands wrappers are being returned.

    """
    from CreateHashIndicatorWrapper import demisto, create_commands_wrapper, MSDE_ACTIONS, XDR_ACTIONS, \
        CROWDSTRIKE_ACTIONS
    hashes = ['hash1',
              'hash2']
    mocker.patch.object(CreateHashIndicatorWrapper, 'execute_commands_multiple_results', return_value=(test_data, []))
    mocker.patch.object(demisto, 'incident', return_value={'id': 1})
    command_wrappers = create_commands_wrapper(hashes, action)
    ioc_metadata = CROWDSTRIKE_ACTIONS.get(action)
    assert len(command_wrappers) == 3
    assert {command_wrapper.brand for command_wrapper in command_wrappers} == \
           {'Cortex XDR - IR', 'CrowdstrikeFalcon', 'Microsoft Defender Advanced Threat Protection'}
    for command_wrapper in command_wrappers:
        if command_wrapper.brand == 'Microsoft Defender Advanced Threat Protection':
            assert isinstance(command_wrapper.commands, list) and isinstance(command_wrapper.args_lst, list)
            assert len(command_wrapper.commands) == len(hashes) and len(command_wrapper.args_lst) == len(hashes)
            assert set(command_wrapper.commands) == {'microsoft-atp-sc-indicator-create'}
            assert {args.get('action') for args in command_wrapper.args_lst} == {MSDE_ACTIONS.get(action)}
        if command_wrapper.brand == 'Cortex XDR - IR':
            assert isinstance(command_wrapper.commands, str) and isinstance(command_wrapper.args_lst, dict)
            assert command_wrapper.commands == XDR_ACTIONS.get(action)
        if command_wrapper.brand == 'CrowdstrikeFalcon':
            assert isinstance(command_wrapper.commands, list) and isinstance(command_wrapper.args_lst, list)
            assert len(command_wrapper.commands) == len(hashes) and len(command_wrapper.args_lst) == len(hashes)
            assert set(command_wrapper.commands) == {'cs-falcon-upload-custom-ioc',
                                                     'cs-falcon-update-custom-ioc'}
            assert command_wrapper.args_lst == [
                {'ioc_type': 'sha256', 'platforms': 'linux,mac,windows', 'applied_globally': 'true',
                 'value': 'hash1',
                 **ioc_metadata},
                {'ioc_id': '12',
                 **ioc_metadata}
            ]
