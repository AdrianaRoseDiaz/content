"""

"""

import demistomock as demisto
from CommonServerPython import *
from CommonServerUserPython import *

from typing import Dict, Any
import traceback

''' STANDALONE FUNCTION '''

BRANDS = ['Cortex XDR - IR',
          'CrowdstrikeFalcon']


def create_commands_wrapper(device_ids, file_path):
    os_to_ids = get_crowdstrike_os_to_id(device_ids)
    return [CommandWrapper(brand='Cortex XDR - IR',
                           command='xdr-run-script-delete-file',
                           args={'endpoint_ids': ','.join(device_ids),
                                 'file_path': file_path}),
            CommandWrapper(brand='CrowdstrikeFalcon',
                           command='cs-falcon-rtr-remove-file',
                           args=[{'host_ids': ','.join(ids),
                                  'file_path': file_path,
                                  'os': os_}
                                 for os_, ids in os_to_ids.items()])]


def get_crowdstrike_os_to_id(device_ids: List[str]):
    crowdstrike_results, crowdstrike_errors = [], []
    endpoint_results, endpoint_errors = execute_commands_multiple_results('endpoint', {'id': ','.join(device_ids)},
                                                                          extract_contents=True)
    crowdstrike_errors.extend(endpoint_errors)
    os_to_ids = {}
    for endpoint_res in endpoint_results:
        for endpoints in endpoint_res.result.get('resources', []):
            if not isinstance(endpoints, list):
                endpoints = [endpoints]
            for endpoint in endpoints:
                os_ = endpoint.get('platform_name')
                if os_ not in os_to_ids:
                    os_to_ids[os_] = []
                os_to_ids[os_].append(endpoint.get('device_id'))
    return os_to_ids


def run_remove_file(args: dict) -> list:
    """
    Given arguments to the command, returns a list of results to return

    :param args: dictionary of arguments of the command (demisto.args())
    :type args: ``dict``

    :return: list of results to return
    :rtype: ``list``
    """

    command_wrappers = create_commands_wrapper(**args)
    return get_wrapper_results(BRANDS, command_wrappers, args)


''' MAIN FUNCTION '''


def main():
    args = demisto.args()
    device_ids = argToList(args.get('device_ids'))
    file_path = args.get('file_path')
    if not device_ids:
        raise ValueError('Device id is not specified')
    if not file_path:
        raise ValueError('File path is not specified')
    try:
        return_results(run_remove_file(args))
    except Exception as ex:
        demisto.error(traceback.format_exc())  # print the traceback
        return_error(f'Failed to execute RemoveFileWrapper. Error: {str(ex)}')


''' ENTRY POINT '''

if __name__ in ('__main__', '__builtin__', 'builtins'):
    main()
