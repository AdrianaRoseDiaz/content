"""Base Script for Cortex XSOAR (aka Demisto)

This is an empty script with some basic structure according
to the code conventions.

MAKE SURE YOU REVIEW/REPLACE ALL THE COMMENTS MARKED AS "TODO"

Developer Documentation: https://xsoar.pan.dev/docs/welcome
Code Conventions: https://xsoar.pan.dev/docs/integrations/code-conventions
Linting: https://xsoar.pan.dev/docs/integrations/linting

"""

import demistomock as demisto
from CommonServerPython import *
from CommonServerUserPython import *

from typing import Dict, Any
import traceback

''' STANDALONE FUNCTION '''

INCIDENT_ID = demisto.incident().get('id')



def execute_command(command, args, extract_contents=True):
    execute_command_results = demisto.executeCommand(command, args)
    errors, results = [], []
    for res in execute_command_results:
        if is_error(res):
            error_message = get_error(res)
            errors.append(error_message)
        else:
            if not extract_contents:
                results.append(res)
            else:
                content = res.get('Contents', {})
                if content:
                    results.append(content)
    return results, errors


def run_xdr_action(device_ids: List[str], file_path: str):
    xdr_results, xdr_errors = execute_command('xdr-run-script-delete-file',
                                       {'endpoint_ids': ','.join(device_ids),
                                        'file_path': file_path},
                                       extract_contents=False)
    return xdr_results, xdr_errors


def run_crowdstrike_falcon_action(device_ids: List[str], file_path: str):
    crowdstrike_results, crowdstrike_errors = [], []
    endpoint_results, endpoint_errors = execute_command('endpoint', {'id': ','.join(device_ids)}, extract_contents=True)
    crowdstrike_errors.extend(endpoint_errors)
    os_to_ids = {}
    for res in endpoint_results:
        for endpoint_res in res.get('resources', []):
            endpoints = endpoint_res.get('Endpoint')
            if not isinstance(endpoints, list):
                endpoints = [endpoints]
            for endpoint in endpoints:
                os_ = endpoint.get('OS')
                if not os_:
                   os_to_ids[os_] = []
                os_to_ids[os_].append(endpoint.get('ID'))
    print(os_to_ids)
    for os_, ids in os_to_ids.items():
        results, errors = execute_command('cs-falcon-rtr-remove-file', {'host_ids': ','.join(ids),
                                                                        'file_path': file_path,
                                                                        'os': os_}, extract_contents=False)
        crowdstrike_results.extend(results)
        crowdstrike_errors.extend(errors)

    return crowdstrike_results, crowdstrike_errors




def run_remove_file(hashes: List[str], action: str) -> list:
    """Returns a simple python dict with the information provided
    in the input (dummy).

    :type hashes: ``List[str]``
    :param hashes: string to add in the dummy dict that is returned

    :return: dict as {"dummy": dummy}
    :rtype: ``str``
    """

    # check instances
    full_results, full_errors = [], []
    instances, instance_errors = execute_command('GetInstances', {'brand': ','.join(INSTANCE_TO_FUNC.keys())})
    if instance_errors:
        raise DemistoException(f'Cant get instances because of {str(instance_errors)}')
    instances = {instance.get('brand') for instance in instances[0]}
    for instance in instances:
        # for each brand that configured, run the appropriate function
        results, errors = INSTANCE_TO_FUNC.get(instance)(hashes, action)
        full_results.extend(results)
        full_errors.extend(errors)
    # deal with errors
    if full_errors:
        error_msg = '\n'.join(['The following errors were seen'] + full_errors)
        if full_results:
            full_results.append(error_msg)
        else:
            raise DemistoException(error_msg)
    return full_results


''' MAIN FUNCTION '''


def main():
    device_ids = argToList(demisto.args().get('device_ids', None))
    file_path = demisto.args().get('file_path')
    if not device_ids:
        raise ValueError('hash not specified')
    if not file_path:
        raise ValueError('file path is not specified')
    try:
        return_results(run_remove_file(device_ids, file_path))
    except Exception as ex:
        demisto.error(traceback.format_exc())  # print the traceback
        return_error(f'Failed to execute BlockHashWrapper. Error: {str(ex)}')


INSTANCE_TO_FUNC = {'Cortex XDR - IR': run_xdr_action,
                    'CrowdstrikeFalcon': run_crowdstrike_falcon_action}

''' ENTRY POINT '''

if __name__ in ('__main__', '__builtin__', 'builtins'):
    main()
